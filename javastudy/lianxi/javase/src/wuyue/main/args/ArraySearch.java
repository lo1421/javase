package wuyue.main.args;
/*
接下来我们将学习java中的查找，是在数组中查找是否存在某个元素，这里我们先针对讲解整型一维数组中某查找某个元素，
数组元素的查找有两种方式：
1.逐一查找法，直到找到为止
2.二分法查找，直到找到为止
在这两种数组元素查找的方法中，二分法查找的效率要高于逐一查找
接下来我将这个ArraySearch类中演示逐一查找的过程和具体代码的实现，最后会将这个过程（代码）封装到方法中
 */


public class ArraySearch {
    public static void main(String[] args) {
        int[] arr = {4, 5,6, 87, 8};
        //需求：从这个数组中寻找是否有87这个元素，并将其称为目标元素，如果该数组中存在目标元素就输出目标元素的下标，如果没有目标元素就返回-1
        //从数组中逐一查找的话应该使用到for循环，用来迭代的变量就作为数组元素的下标
        for (int i = 0; i < arr.length; i++){
            if(arr[i]==5){
                System.out.println("数组中存在目标元素，其下标为："+i);
                return;
                //如果程序进入到了这个if语句当中，那么就表明该数组中是存在这个元素的，就可以执行if语句中的return语句，就可以终止当前的方法
            }
    }//这里是循环结束的地方，如果代码能走到这里，则表示没有执行if语句，那么表示数组arr遍历完了之后，还是没有找到目标元素，那么就输出一个结果的信息
        System.out.println("数组中没有目标元素87");
/*
注意：如果数组中存在大于一个目标元素，那么输出的目标元素的下标一定对应的是遍历数组时最先出现的那个目标元素的下标被输出
例如 ：将上述数组修改为 int[] arr = {4,5,6,5,87,8,5};
目标元素时5，那么输出的目标元素的下标就一定是 1。
原因：程序在执行的过程中，在循环数组的时候，首次出现了元素5，那么就满足了进如if条件语句的条件，那么就会执行if语句中的代码，return语句也就会执行
 */
    }
}
/*
思考：
是否可以将上述的代码封装到一个方法中，这个方法可以实现使用逐一查找数组元素的功能？
可以，具体过程见程序ArraySearch01
 */
