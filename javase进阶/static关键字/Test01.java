/*
我觉得ChatGPT在讲解static关键字的时候讲的非常好，也做了很好的总结
static在java中是一个关键字，可以修饰类，变量，方法，代码块
1.static修饰变量和方法
static修饰的变量和方法变成了类变量和类方法，也称静态变量和静态方法。
这些static修饰的变量和方法不属于对象，而是属于类，是类级别的变量和方法，,因此它们可以被所有对象所共有，
可以在不创建对象的时候使用，通过这个类创建的所有对象的静态变量的属性值都是一样的，而且所有对象都具备一样的方法
这表明static可以通过修饰变量和方法将这些变量和方法变成类级别的，是这个类型对象共同满足的特征
2.static修饰代码块
我们将static修饰一个代码块的时候，这个代码块也就变成了静态代码块，静态代码块只执行一次，而且在类加载的时候执行
所以别称 类加载时机，一个类中可以定义多个静态代码块，而且这些代码块之间存在由上至下的执行顺序
我们通常在初始化一些静态变量的时候和一些其他需要在类加载时机输出的代码的时候定义一个静态代码块来实现这些代码
3.static修饰的内部类
static修饰的内部类就变成了静态内部类，静态内部类跟其它内部类不一样，他不依赖外部类的实例而存在，因此可以在外部类没有实例的情况下创建内部类的实例


*/
/*
在 Java 中，`static` 是一种修饰符，它可以用来修饰类、方法、变量和代码块。
下面是它的一些用法和含义：

1. 修饰类变量和方法

当我们将 `static` 修饰一个类的变量或方法时，它们就成为了类变量和类方法，也被称为静态变量和静态方法。
这些变量和方法不属于对象，而是属于类本身。因此，它们可以被所有的对象所共享，可以在不创建对象的情况下直接调用。

举个例子，我们可以定义一个类变量 `count` 来记录创建的对象数量，每次创建对象时就将 `count` 加 1。
这样就可以统计出创建的对象总数。另外，静态方法也常用于实现一些公用的功能，例如工具类中的常用方法等。

2. 修饰代码块

当我们将 `static` 修饰一个代码块时，它就变成了静态代码块。静态代码块只在类加载时执行一次，用于初始化类变量或执行一些其他的静态操作。

3. 修饰内部类

当我们将 `static` 修饰一个内部类时，它就变成了静态内部类。静态内部类与普通内部类不同，它不依赖于外部类的实例而存在，
因此可以在没有外部类实例的情况下创建内部类的实例。

总之，`static` 修饰符的主要作用是将变量、方法、代码块或内部类与类本身相关联，而不是与类的实例相关联。
它为我们提供了一种灵活的机制，可以在不创建对象的情况下访问类的成员，并且可以在类加载时进行一些初始化操作。
*/
public class Test01{
	//在这里其实是可以定义一个静态内部类
	public static class InnerClass1{
		
	}
	//定义一实例内部类
	public class InnerClass2{
		
	}
	//定义一个静态变量
	static int a ;
	//定义一个静态代码块，要求完成静态变量的初始化和记录类加载的时间
	static{
	}
//	定义一个静态方法，完成记录对象创建的个数
public static int num(){
	
}
	//创建一个实例方法
	public void doSome(){
		
	}
	//程序的入口
	public static void main(String[] args){
		
	}
}