/*
1.使用关键字static可以定义“静态代码块”
2.什么是静态代码块？定义的语法是什么？
static{
	java语句;
	java语句;
	java语句;
	...
}
（我们已经知道但凡是static修饰的量都是类级别的）
所以静态代码块应该定义在类体中方法体外
3.静态代码块在什么时候执行呢？
静态代码块在类加载的时候执行，而且只会执行一次
4.接下来我们通过测试来找出静态代码块的特点

*/
public class StaticTest02{
	static{
		System.out.println("A静态代码块执行");
	}
	
	public static void main(String[] args){
	System.out.println("main begin!");	
	}
	
	static{
		System.out.println("B静态代码块执行");
	}
    
	static{
		System.out.println("C静态代码块执行");
	}
}
/*
上述程序运行结果：
A静态代码块执行
B静态代码块执行
C静态代码块执行
main begin!
*/
/*
通过上述测试可以得出结论：
1.static静态代码块在类加载的时候执行，并且在main方法执行之前执行
2.静态代码块之间也是有顺序的，一般是按照自上而下的顺序执行
3.一个类中可以定义多个“静态代码块”
4.静态代码块定义的语法是
static{
	java语句;
	java语句;
	...
}
*/

/*
思考你根据静态代码块的特点可以推测出他有什么用？
1.静态代码块不是常用的（不是每个类当中都要写的东西）
2.静态代码块这种语法机制其实是SUN公式给我们java程序员的一个特殊时刻，这个时机叫做“类加载时机”。
*/
/*具体的业务比如：
项目经理说:大家注意了，所有我们编写的程序中，只要是类加载了，就记录一下类加载的日志信息
（x年x月x日x时x分x秒这个类加载到了JVM中了）
思考：
像这样的业务，应该将日志信息写到哪里才可以实现在类加载的那个时刻就记录下类加载的日志信息，而且这个代码只执行一次呢？
显然这段代码要做到有的放矢，所以应该写在静态代码块当中。存放在方法体中是不满足的，因为方法每被调用一次就会执行一次。
所以：SUN公司专门为程序员设置了像“静态代码块”这样的语法机制。
*/
//既然静态代码块是在类加载的时候执行，可以联想到静态变量，因为静态变量也是在类加载的时候完成初始化的
//那么静态代码块和静态变量这两个都是类级别的有无先后顺序呢？
//我将在StaticTest03这个程序中为你讲解