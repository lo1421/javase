/*
接下来我们来继续学习多态java
1.多态在开发中的作用是什么？（很重要）
很经典的例子！！老师讲的也很好！！
*/
public class Test{
	public static void main(String[] args){
		//创建主人对象
		//假设这个时候主人只喜欢养宠物狗
		Master zhangsan = new Master();
		zhangsan.feed(new Dog());
		
		/*
		注意：多态的前提是要有继承！！！
		1.使用了多态后，这里创建子类对象的时候其实传参数过程中，使用了多态的基础语法：向上转型（自动类型转换）
		2.为什么使用自动类型转换？？
		因为父类型引用指向子类型对象时，调用的是子类从父类继承过去改写的方法，这样的方法是父类子类当中都有的
		3.如果使用多态基础语法向上转型之后，父类型引用指向了子类型对象之后，想访问的是子类特有的方法怎么办？？
		这个时候就需要使用多态的基础语法；向下转型（强制类型转换），使用强制类型转换符将父类引用强制转换成子类型对象
		4.向下转型的时候，父类型引用强制转换前指向的子类型对象必须跟强制转换后的子类型对象类型一致，
		否则会报错：ClassCastException类转换异常
		5.为了防止向下转型会出现Cla这样的风险，就必须最好搭配着instanceof语法和条件语句判断一下引用指向和转换对象前后
		是否一致
		6.insetanceof 语法：
		引用 instanceof 类名
		这个语法的判断结果是true后者false
		instanceof是一个运算符
		
		*/
		zhangsan.feed(new Cat());
		/*
		注意：起初主人只喜欢养宠物狗狗，随着时间的推移，这个主人又喜欢上养猫
		这表明在实际开发当中客户有了新的需求，作为软件开发师必须满足客户的新的需求。
		我们怎么满足客户的需求呢？
		在不使用多态机制下，要完成主人喂猫，只需要在Master类当中再编写一个可以直接喂猫的方法，然后再写一个Cat类
		*/
	}
}
/*
思考：在软件开发过程中，修改这个Master类会存在什么样的问题？
一定要记住，软件在扩展的过程中，修改的越少越好，，修改的越多，你的系统就越不稳定，未知的风险也就越多
例如：
2010年开发了农行的内部系统
2020年农行内部系统需要升级，这个时候的升级是在2010年的系统基础上修改的，那么当然是修改的越少越好，
这就需要你当时在编写2010年的开发系统的时候很好的考虑了软件的扩展性
这里涉及到了软件开发的七大原则之一（不属于java，而是整个软件开发行业的七大原则）
其中有一条最基本的原则：OCP（开放关闭原则）
什么是开闭原则？
对扩展开放：你可以额外的添加
对修改关闭：最好很少的修改程序
软件开发的过程中修改的越少越好
高手在开发软件的过程中：不仅仅考虑实现客户的需求，而且还很好的考虑了软件的扩展性
不要一味的想着只是实现客户的需求，而忘记软件的扩展性
如果软件的扩展性很强，就不会出现：牵一发而动全身的现象

*/
/*
上述程序没有使用多态，扩展性非常的差，只要这个Master用户的需求增加了，就必须在这个Master当中继续添加新的喂养具体宠物的方法
，有没有一种可能，我们既能满足客户的需求，而且还不用对Master这个类做任何的太多的修改，这个时候你就需要具备抽象和观察的能力，当你
面向对象的时候越抽象越好，这样就可以很好的提高了程序的扩展性
例如：你如果将Dog、Cat具体的对象等等，抽象成一个概括性的Pet对象，可以让Pet做父类，这样当你完成主人喂养宠物的方法的时候，面向抽象的
对象，就可以很好的增强代码的扩展性。

*/